# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem              1.0
PortGroup               active_variants 1.1
PortGroup               meson 1.0
PortGroup               muniversal 1.0

# Please keep the pango and pango-devel ports as similar as possible.

name                    pango
conflicts               pango-devel
set my_name             pango
epoch                   1
version                 1.48.3
revision                0
checksums               rmd160  32de268a3b1f14f558735538ce0bf6255ae1f9c7 \
                        sha256  36ea145c82217c8efc954d02aa577391b1d9a5da205e0aef7ffe0461349b4b46 \
                        size    565956

set branch              [join [lrange [split ${version} .] 0 1] .]
categories              x11
maintainers             {gcenx @gcenx}
license                 LGPL-2+
homepage                https://www.pango.org/
master_sites            gnome:sources/${my_name}/${branch}
platforms               darwin
distname                ${my_name}-${version}
dist_subdir             ${my_name}
use_xz                  yes
use_parallel_build      yes

description \
    Framework for the layout and rendering of i18n text

long_description \
    The goal of the Pango project is to provide an \
    open-source framework for the layout and rendering \
    of internationalized text.

set python_version          39
set python_branch           3.9

depends_build-append \
    port:pkgconfig

depends_lib-append \
    port:gobject-introspection \
    path:lib/pkgconfig/glib-2.0.pc:glib2 \
    path:lib/pkgconfig/cairo.pc:cairo \
    port:fribidi \
    port:graphite2 \
    port:harfbuzz \
    port:libthai \
    port:python${python_version}

configure.env-append        PATH=${frameworks_dir}/Python.framework/Versions/${python_branch}/bin:$env(PATH)
build.env-append            PATH=${frameworks_dir}/Python.framework/Versions/${python_branch}/bin:$env(PATH)
configure.python            ${prefix}/bin/python${python_branch}

compiler.cxx_standard 2011
configure.cxxflags-append -std=c++11

configure.args          -Ddefault_library=both \
                        -Dintrospection=enabled \
                        -Dxft=disabled

license_noconflict      gobject-introspection

platform macosx {
    variant quartz {
        # Although this variant does nothing, pango will automatically build
        # itself differently depending on whether or not cairo is installed with
        # the quartz variant. Therefore this variant is necessary to be able to
        # distinguish whether an installed pango has Quartz support or not.
    }

    default_variants    +quartz
    # Don't allow Quartz support to be disabled. Keep the variant for awhile in
    # case any dependents are using the active_variants portgroup to check for it.
    variant_set         quartz

    if {[variant_isset quartz]} {
        require_active_variants path:lib/pkgconfig/cairo.pc:cairo quartz
    }
}

variant x11 {
    depends_lib-append      port:Xft2
    configure.args-delete   -Dxft=disbled
}

if {${os.platform} ne "darwin" || ${os.subplatform} ne "macosx"} {
    # When not on macOS, don't allow X11 support to be disabled, since it is the
    # only available option.
    variant_set         x11
}

if {[variant_isset x11]} {
    require_active_variants path:lib/pkgconfig/cairo.pc:cairo x11
}

# gobject-introspection uses g-ir-scanner, which uses $CC from env
if {![info exists universal_possible]} {
    set universal_possible [expr {${os.universal_supported} && [llength ${configure.universal_archs}] >= 2}]
}
if {${universal_possible} && [variant_isset universal]} {
    foreach arch ${configure.universal_archs} {
        lappend merger_build_env(${arch})  "CC=${configure.cc} -arch ${arch}"
        lappend merger_destroot_env(${arch})  "CC=${configure.cc} -arch ${arch}"
    }
} else {
    build.env-append       "CC=${configure.cc} ${configure.cc_archflags}"
    destroot.env-append    "CC=${configure.cc} ${configure.cc_archflags}"
}

test.run                yes
test.target             check

livecheck.type          gnome
livecheck.name          ${my_name}

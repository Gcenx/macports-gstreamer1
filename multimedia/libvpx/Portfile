# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           compiler_blacklist_versions 1.0
PortGroup           muniversal 1.1

name                libvpx
conflicts           libvpx-devel
set my_name         libvpx
version             1.12.0
revision            0

categories          multimedia
license             Permissive
maintainers         {@gcenx}

description         WebM VP8/VP9 Codec SDK
long_description    The WebM VP8/VP9 codecs are being developed \
                    specifically to meet the demand for the consumption \
                    of video over the Internet, including professionally \
                    and amateur produced video-on-demand and conversational \
                    video content. VP9 is an evolution of the VP8 video \
                    codec and includes a number of enhancements and new \
                    coding tools that have been added to improve coding efficiency. \
                    The VP9 encoder in this release is not, as yet, feature complete.

homepage            http://webmproject.org/tools/

distname            ${my_name}-${version}
dist_subdir         ${my_name}

# use git fetch rather than downloading a snapshot tarball
# which delivers a different checksum and size on each download
# this is not a stealth upgrade but a "feature" of this repo

fetch.type          git
git.url             https://chromium.googlesource.com/webm/${my_name}
git.branch          v${version}

# upstream support for non-intel archs removed in version 1.5.0
supported_archs     x86_64 i386 arm64 ppc ppc64

# Only use git format patches
patch.pre_args      -p1

patchfiles-append   patch-Makefile.diff

# Donâ€™t set -isysroot nor -mmacosx-version-min
patchfiles-append   patch-configure.sh.diff

# Uses newer assembly features on Intel.
# Also blacklist clang 8, due to issues like:
#   error: use of undeclared identifier 'abs'
compiler.blacklist-append  {*gcc-[3-4].*} {clang < 900} {macports-clang-3.*}

# As of 1.7.0: builds both static and shared libraries
# doesn't install docs or examples correctly, so disable them.
configure.args      --enable-vp8 \
                    --enable-vp9 \
                    --enable-vp9-highbitdepth \
                    --enable-internal-stats \
                    --enable-pic \
                    --enable-postproc \
                    --enable-multithread \
                    --enable-experimental \
                    --disable-install-docs \
                    --disable-debug-libs \
                    --disable-examples \
                    --enable-unit-tests

platform darwin {
    if {${build_arch} eq "ppc" || ${build_arch} eq "ppc64"} {
        # disable a wrong kind of abi
        patchfiles-append      patch-vpx_ports.diff
        # with shared enabled the build fails
        configure.args-append  --disable-shared
    } else {
        configure.args-append  --enable-shared
    }
}

platform darwin 8 {
    depends_build-append  port:gmake
    build.cmd             ${prefix}/bin/gmake
}

build.target
build.args          verbose=1
destroot.args       verbose=1

if {"${configure.sdkroot}" eq ""} {
    configure.sdkroot "/"
}

# not sure on this options usage 
triplet.host_cmd

foreach my_arch {i386 x86_64 arm64} {
   configure.args.${my_arch}     --force-target=${my_arch}-${os.platform}${os.major}-gcc
}

# for Intel archs, allow runtime cpu detection
configure.args.i386-append     --enable-runtime-cpu-detect
configure.args.x86_64-append   --enable-runtime-cpu-detect

configure.args.ppc-append      --force-target=generic-gnu
configure.args.ppc64-append    --force-target=generic-gnu

# shouldn't this also be set for arm64?
if {"x86_64" in ${muniversal.build_arch} || "i386" in ${muniversal.build_arch}} {
    depends_build-append  port:yasm
    depends_skip_archcheck-append yasm
}

# shared library uses relative path in install name
# override with absolute path
post-destroot {
    foreach f [glob ${destroot}${prefix}/lib/${my_name}.*.dylib] {
        system "install_name_tool -id [string map [list ${destroot} ""] ${f}] ${f}"
    }
    foreach f [glob ${destroot}${prefix}/bin/*] {
        system "install_name_tool -change \
        [lindex [split [glob ${destroot}${prefix}/lib/${my_name}.*.dylib] "/"] end] \
        [string map [list ${destroot} ""] [glob ${destroot}${prefix}/lib/${my_name}.*.dylib]] ${f}"
    }
}

test.run        yes
test.target     test

livecheck.type  regex
livecheck.url   https://chromium.googlesource.com/webm/${my_name}
livecheck.regex ">v(\\d+(?:\\.\\d+)*)<"
